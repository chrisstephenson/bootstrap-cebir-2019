#lang racket
(require "teachpacks/evren-teachpack.rkt")


;struct (v x(sayı) y(sayı)) -> vektör
(STRUCT v (x y))

(define v-örneği (v 3 4))
(define v-örneği-2 (v 5 12))

;vector-scale vector sayı -> vector
(define (v* vector s ) (v
                             (* s (v-x vector))
                             (* s (v-y vector))))
(check-expect (v* v-örneği 2) (v 6 8))

(define (çizgi-uzunluğu a b)
  (- (max a b) (min a b)))
(ÖRNEK (çizgi-uzunluğu 5 3) 2)
(ÖRNEK (çizgi-uzunluğu 3 5) 2)

(define (mesafe px py cx cy)
  (sqrt (+ (sqr (çizgi-uzunluğu px cx)) ( sqr (çizgi-uzunluğu py cy)) ) ) )
(ÖRNEK (mesafe 4 0 0 3) 5)
(ÖRNEK (mesafe 12 0 0 5) 13)

;vector* vector vector -> sayı
(define (v. v1 v2 ) 
                         (+ (* (v-x v1) (v-x v2))
                          (* (v-y v1) (v-y v2))))
(check-expect (v. v-örneği v-örneği-2) 63)

;vector+ vector vector -> vector
(define (v+ v1 v2 ) (v
                          (+ (v-x v1) (v-x v2))
                          (+ (v-y v1) (v-y v2))))
(check-expect (v+ v-örneği v-örneği-2) (v 8 16))

;; vector- vector vector-> vector
(define (v- v1 v2) (v (- (v-x v1) (v-x v2) ) (- (v-y v1) (v-y v2))))
(check-expect (v- v-örneği v-örneği-2) (v -2 -8))

;; vector-uzunluk vector -> sayı
(define (v-mag v)  (sqrt (+ (sqr (v-x v)) ( sqr (v-y v)) ) ))
(check-expect (v-mag v-örneği) 5)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; Hediye vektör çizim fonksiyonları
; Vektör STRUCT tanıttıktan sonra bu fonkisyonları uncomment edebilirsiniz
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;place-image/v
; resim v sahne -> sahne
; bir sahneye vectöre göre bir imaj yerleştir
; template :
; (define (place-image/v im v1 sahne)
;  (... im ... (v-x v1) ... (v-y v1) ...)
(define test-circle (circle 10 "solid" "purple"))
(define test-square (square 100 "solid" "green"))

(ÖRNEK (place-image/v  test-circle (v 5 5) test-square)
       (place-image/align test-circle 5 5 "center" "center" test-square))
(ÖRNEK (place-image/v test-circle (v 3 8) test-square)
       (place-image/align test-circle 3 8 "center" "center" test-square))
(ÖRNEK (place-image/v test-circle (v 1 2) test-square)
       (place-image/align test-circle 1 2 "center" "center" test-square))
(ÖRNEK (place-image/v test-circle (v 2 8) test-square)
       (place-image/align test-circle 2 8 "center" "center" test-square))

(define (place-image/v im v1 sahne)
  (place-image/align im (v-x v1) (v-y v1) "center" "center"  sahne))

; place-line/v v v color görüntü -> görüntü
; v1'den v2'e giden bir çizgi arka imajına yerleştir
(ÖRNEK (place-line/v (v 2 3) (v 5 1) "red" test-square)
       (add-line test-square 2 3 5 1 "red")) 

(define (place-line/v v1 v2 renk arka)
  (add-line arka (v-x v1) (v-y v1) (v-x v2) (v-y v2) renk)) 

; place-text/v v metin sayı color görüntü -> görüntü
; v pozisyonda  verilen metni arka imajına yerleştir
(ÖRNEK (place-text/v (v 20 30) "Hello" 15 "red" test-square)
       (place-image/v (text "Hello" 15 "red") (v 20 30) test-square))
(define (place-text/v v metin size col arka)
  (place-image/v (text metin size col) v arka))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

; STRUCT nesne
; imaj : görüntü - nesneini imajı
; yer : v - nesnenin ekrandaki yeri
; hız : v - nesnenin hızı
; ivme : v - nesnenin ivmesi
(STRUCT nesne (imaj yer hız ivme))
(define ship-base (rotate 90 (polygon (list (make-pulled-point 1/2 20 0 0 1/2 -20)
                                            (make-pulled-point 0 0 -10 20 0 0)
                                            (make-pulled-point 1/2 -20 60 0 1/2 20)
                                            (make-pulled-point 0 0 -10 -20 0 0))
                                      "solid" "white")))

(define wing (triangle/sss 20 50 50 "solid" "red"))
(define space-ship-1-imaj (overlay/offset (overlay/offset ship-base 20 35 (rotate 135 wing)) -30 25 (flip-horizontal (rotate 135 wing))))


(define space-ship-1 (nesne space-ship-1-imaj (v 300 500) (v 0 0) (v 0 0)))

(STRUCT enemy ( n-part guns a-i))

(STRUCT player ( n-part gun ab in))

(STRUCT bullet ( n-part dam))







;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
; STRUCT evren
; arkaplanı : görüntü - oyun arka planı
;
(STRUCT evren (arkaplanı n1 n2 n3))

(define BACKGROUND (rectangle 600 600 "solid" "black")) 

(define yaradılış (evren BACKGROUND space-ship-1 space-ship-1 space-ship-1))

(define (nesne-çiz n g) (place-image/v (nesne-imaj n) (nesne-yer n) g))
(ÖRNEK (nesne-çiz (nesne (square 20 "solid" "green")
                         (v 50 50)
                         (v 0 0)
                         (v 0 0))
                  (square 500 "solid" "pink"))
       (place-image/v (square 20 "solid" "green") (v 50 50) (square 500 "solid" "pink") ))
(define nesne-örneği (nesne (square 20 "solid" "green")
                         (v 50 50)
                         (v 0 0)
                         (v 0 0)))
(define (nesne-fizik-güncelle n) (nesne (nesne-imaj n) (v+ (nesne-yer n) (nesne-hız n)) (v+ (nesne-ivme n) (nesne-hız n)) (nesne-ivme n)))
(ÖRNEK (nesne-fizik-güncelle (nesne (square 40 "solid" "pink") (v 3 5) (v 5 6) (v 1 8))) (nesne (square 40 "solid" "pink") (v 8 11) (v 6 14) (v 1 8)))

(ÖRNEK (evren-çiz (evren BACKGROUND
                         (nesne (circle 10 "solid" "red") (v 50 50) (v 0 0) (v 0 0))
                         (nesne (circle 10 "solid" "blue") (v 150 250) (v 0 0) (v 0 0))
                         (nesne (circle 10 "solid" "purple") (v 100 200) (v 0 0) (v 0 0))))
       (nesne-çiz (nesne (circle 10 "solid" "red") (v 50 50) (v 0 0) (v 0 0))
                  (nesne-çiz (nesne (circle 10 "solid" "blue") (v 150 250) (v 0 0) (v 0 0))
                             (nesne-çiz (nesne (circle 10 "solid" "purple") (v 100 200) (v 0 0) (v 0 0)) BACKGROUND ))))

(define (evren-çiz ap) (nesne-çiz (evren-n1 ap)
                                           (nesne-çiz (evren-n2 ap)
                                                      (nesne-çiz (evren-n3 ap) (evren-arkaplanı ap) ))))

(define (evren-güncelle e)
  (evren (evren-arkaplanı e) (nesne-fizik-güncelle (evren-n1 e)) (nesne-fizik-güncelle (evren-n2 e)) (nesne-fizik-güncelle (evren-n3 e))))

(check-expect (evren-güncelle yaradılış) (evren BACKGROUND space-ship-1
                                                space-ship-1
                                                space-ship-1 ))


(define (evren-tuş e t)
  e)

(define (evren-fare e x y m)
  e)




(define FRAME-RATE 12)






;; SES herhangbirşey ses-dosyası-metin -> herhangibirşey
;; birinci paramatresini aynen dönsürüyor, sesi çalarak
(ÖRNEK (SES 0 "ses/bark.wav") 0)

(test)


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Sabit kod bundan sonra                               ;; 
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
(yut (big-bang yaradılış
  (on-tick evren-güncelle (/ 1.0 FRAME-RATE))
  (on-draw evren-çiz)
  (on-key evren-tuş)
  (on-mouse evren-fare)))

